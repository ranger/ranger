.\" Automatically generated by Pod::Man 2.25 (Pod::Simple 3.20)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "RANGER 1"
.TH RANGER 1 "ranger-1.5.5" "02/10/2013" "ranger manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
ranger \- visual file manager
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBranger\fR [\fB\-\-help\fR] [\fB\-\-version\fR] [\fB\-\-debug\fR] [\fB\-\-clean\fR]
[\fB\-\-list\-unused\-keys\fR] [\fB\-\-fail\-unless\-cd\fR] [\fB\-\-choosedir\fR=\fItargetfile\fR]
[\fB\-\-choosefile\fR=\fItargetfile\fR] [\fB\-\-copy\-config\fR=\fIfile\fR] [\fB\-\-mode\fR=\fImode\fR]
[\fB\-\-flags\fR=\fIflags\fR] [\fIpath/filename\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
ranger is a console file manager with \s-1VI\s0 key bindings.  It provides a
minimalistic and nice curses interface with a view on the directory hierarchy.
The secondary task of ranger is to figure out which program you want to use to
open your files with.
.PP
This manual mainly contains information on the usage of ranger.  Refer to the
\&\fI\s-1README\s0\fR for install instructions and to \fIdoc/HACKING\fR for development
specific information.  For configuration, see the files in \fIranger/config\fR.
They are usually installed to \fI/usr/lib/python*/site\-packages/ranger/config\fR
and can be obtained with ranger's \-\-copy\-config option.
.PP
Inside ranger, you can press \fI1?\fR for a list of key bindings, \fI2?\fR for a list
of commands and \fI3?\fR for a list of settings.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fB\-d\fR, \fB\-\-debug\fR" 14
.IX Item "-d, --debug"
Activate the debug mode: Whenever an error occurs, ranger will exit and print a
full traceback.  The default behavior is to merely print the name of the
exception in the statusbar/log and try to keep running.
.IP "\fB\-c\fR, \fB\-\-clean\fR" 14
.IX Item "-c, --clean"
Activate the clean mode:  ranger will not access or create any configuration
files nor will it leave any traces on your system.  This is useful when your
configuration is broken, when you want to avoid clutter, etc.
.IP "\fB\-\-choosefile\fR=\fItargetfile\fR" 14
.IX Item "--choosefile=targetfile"
Allows you to pick a file with ranger.  This changes the behavior so that when
you open a file, ranger will exit and write the absolute path of that file into
\&\fItargetfile\fR.
.IP "\fB\-\-choosefiles\fR=\fItargetfile\fR" 14
.IX Item "--choosefiles=targetfile"
Allows you to pick multiple files with ranger.  This changes the behavior so
that when you open a file, ranger will exit and write the absolute paths of all
selected files into \fItargetfile\fR, adding one newline after each filename.
.IP "\fB\-\-choosedir\fR=\fItargetfile\fR" 14
.IX Item "--choosedir=targetfile"
Allows you to pick a directory with ranger.  When you exit ranger, it will
write the last visited directory into \fItargetfile\fR.
.IP "\fB\-\-selectfile\fR=\fItargetfile\fR" 14
.IX Item "--selectfile=targetfile"
Open ranger with \fItargetfile\fR selected.
.IP "\fB\-\-copy\-config\fR=\fIfile\fR" 14
.IX Item "--copy-config=file"
Create copies of the default configuration files in your local configuration
directory.  Existing ones will not be overwritten.  Possible values: \fIall\fR,
\&\fIrc\fR, \fIcommands\fR, \fIscope\fR.
.IP "\fB\-\-list\-unused\-keys\fR" 14
.IX Item "--list-unused-keys"
List common keys which are not bound to any action in the \*(L"browser\*(R" context.
This list is not complete, you can bind any key that is supported by curses:
use the key code returned by \f(CW\*(C`getch()\*(C'\fR.
.IP "\fB\-\-list\-tagged\-files\fR=\fItag\fR" 14
.IX Item "--list-tagged-files=tag"
List all files which are tagged with the given tag.  Note: Tags are single
characters.  The default tag is \*(L"*\*(R"
.IP "\fB\-\-fail\-unless\-cd\fR" 14
.IX Item "--fail-unless-cd"
Return the exit code 1 if ranger is used to run a file instead of used for file
browsing. (For example, \*(L"ranger \-\-fail\-unless\-cd test.txt\*(R" returns 1.)
.IP "\fB\-m\fR \fIn\fR, \fB\-\-mode\fR=\fIn\fR" 14
.IX Item "-m n, --mode=n"
When a filename is supplied, run it in mode \fIn\fR.  This has no effect unless
the execution of this file type is explicitly handled in the configuration.
.IP "\fB\-f\fR \fIflags\fR, \fB\-\-flags\fR=\fIflags\fR" 14
.IX Item "-f flags, --flags=flags"
When a filename is supplied, run it with the given \fIflags\fR to modify
behavior.  The execution of this file type is explicitly handled in the
configuration.
.IP "\fB\-\-cmd\fR=\fIcommand\fR" 14
.IX Item "--cmd=command"
Execute the command after the configuration has been read.  Use this option
multiple times to run multiple commands.
.IP "\fB\-\-version\fR" 14
.IX Item "--version"
Print the version and exit.
.IP "\fB\-h\fR, \fB\-\-help\fR" 14
.IX Item "-h, --help"
Print a list of options and exit.
.SH "CONCEPTS"
.IX Header "CONCEPTS"
This part explains how certain parts of ranger work and how they can be used
efficiently.
.SS "\s-1TAGS\s0"
.IX Subsection "TAGS"
Tags are single characters which are displayed left of a filename.  You can use
tags however you want.  Press \*(L"t\*(R" to toggle tags and \*(L"T\*(R" to remove any tags of
the selection. The default tag is an Asterisk (\*(L"*\*(R"), but you can use any tag by
typing \fI"<tagname>\fR.
.SS "\s-1PREVIEWS\s0"
.IX Subsection "PREVIEWS"
By default, only text files are previewed, but you can enable external preview
scripts by setting the option \f(CW\*(C`use_preview_script\*(C'\fR and \f(CW\*(C`preview_files\*(C'\fR to True.
.PP
This default script is \fI~/.config/ranger/scope.sh\fR. It contains more
documentation and calls to the programs \fIlynx\fR and \fIelinks\fR for html,
\&\fIhighlight\fR for text/code, \fIimg2txt\fR for images, \fIatool\fR for archives,
\&\fIpdftotext\fR for PDFs and \fImediainfo\fR for video and audio files.
.PP
Install these programs (just the ones you need) and scope.sh will automatically
use them.
.SS "\s-1SELECTION\s0"
.IX Subsection "SELECTION"
The \fIselection\fR is defined as \*(L"All marked files \s-1IF\s0 \s-1THERE\s0 \s-1ARE\s0 \s-1ANY\s0, otherwise
the current file.\*(R"  Be aware of this when using the :delete command, which
deletes all files in the selection.
.PP
You can mark files by pressing <Space>, v, etc.  A yellow \fBMrk\fR symbol at the
bottom right indicates that there are marked files in this directory.
.SS "\s-1MACROS\s0"
.IX Subsection "MACROS"
Macros can be used in commands to abbreviate things.
.PP
.Vb 5
\& %f   the highlighted file
\& %d   the path of the current directory
\& %s   the selected files in the current directory.
\& %t   all tagged files in the current directory
\& %c   the full paths of the currently copied/cut files
.Ve
.PP
The macros \f(CW%f\fR, \f(CW%d\fR and \f(CW%s\fR also have upper case variants, \f(CW%F\fR, \f(CW%D\fR and \f(CW%S\fR,
which refer to the next tab.  To refer to specific tabs, add a number in
between.  (%7s = selection of the seventh tab.)
.PP
\&\f(CW%c\fR is the only macro which ranges out of the current directory. So you may
\&\*(L"abuse\*(R" the copying function for other purposes, like diffing two files which
are in different directories:
.PP
.Vb 2
\& Yank the file A (type yy), move to the file B, then type
\& @diff %c %f
.Ve
.PP
Macros for file paths are generally shell-escaped so they can be used in the
\&\f(CW\*(C`shell\*(C'\fR command.
.SS "\s-1BOOKMARKS\s0"
.IX Subsection "BOOKMARKS"
Type \fBm<key>\fR to bookmark the current directory. You can re-enter this
directory by typing \fB`<key>\fR. <key> can be any letter or digit.  Unlike vim,
both lowercase and uppercase bookmarks are persistent.
.PP
Each time you jump to a bookmark, the special bookmark at key ` will be set
to the last directory. So typing \*(L"``\*(R" gets you back to where you were before.
.PP
Bookmarks are selectable when tabbing in the :cd command.
.PP
Note: The bookmarks ' (Apostrophe) and ` (Backtick) are the same.
.SS "\s-1RIFLE\s0"
.IX Subsection "RIFLE"
Rifle is the file opener of ranger.  It can be used as a standalone program or
a python module.  It is located at \fIranger/ext/rifle.py\fR.  In contrast to
other, more simple file openers, rifle can automatically find installed
programs so it can be used effectively out of the box on a variety of systems.
.PP
It's configured in \fIrifle.conf\fR through a list of conditions and commands.
For each line the conditions are checked and if they are met, the respective
command is taken into consideration.  By default, simply the first matching
rule is used.  In ranger, you can list and choose rules by typing \*(L"r\*(R" or simply
by typing \*(L"<rulenumber><enter>\*(R".  If you use rifle standalone, you can list all
rules with the \*(L"\-l\*(R" option and pick a rule with \*(L"\-p <number>\*(R".
.PP
The rules, along with further documentation, are contained in
\&\fIranger/config/rifle.conf\fR.
.SS "\s-1FLAGS\s0"
.IX Subsection "FLAGS"
Flags give you a way to modify the behavior of the spawned process.  They are
used in the commands \f(CW\*(C`:open_with\*(C'\fR (key \*(L"r\*(R") and \f(CW\*(C`:shell\*(C'\fR (key \*(L"!\*(R").
.PP
.Vb 4
\& f   Fork the process.  (Run in background)
\& c   Run the current file only, instead of the selection
\& r   Run application with root privilege (requires sudo)
\& t   Run application in a new terminal window
.Ve
.PP
There are some additional flags that can currently be used only in the \f(CW\*(C`shell\*(C'\fR
command: (for example \f(CW\*(C`:shell \-w df\*(C'\fR)
.PP
.Vb 3
\& p   Redirect output to the pager
\& s   Silent mode.  Output will be discarded.
\& w   Wait for an Enter\-press when the process is done
.Ve
.PP
By default, all the flags are off unless specified otherwise in the
\&\fIrifle.conf\fR configuration file.  You can specify as many flags as you want.
An uppercase flag negates the effect: \*(L"ffcccFsf\*(R" is equivalent to \*(L"cs\*(R".
.PP
The terminal program name for the \*(L"t\*(R" flag is taken from the environment
variable \f(CW$TERMCMD\fR.  If it doesn't exist, it tries to extract it from \f(CW$TERM\fR and
uses \*(L"xterm\*(R" as a fallback if that fails.
.PP
Examples: \f(CW\*(C`:open_with c\*(C'\fR will open the file that you currently point at, even
if you have selected other files.  \f(CW\*(C`:shell \-w df\*(C'\fR will run \*(L"df\*(R" and wait for
you to press Enter before switching back to ranger.
.SS "\s-1PLUGINS\s0"
.IX Subsection "PLUGINS"
ranger's plugin system consists of python files which are located in
\&\fI~/.config/ranger/plugins/\fR and are imported in alphabetical order when
starting ranger.  A plugin changes rangers behavior by overwriting or extending
a function that ranger uses.  This allows you to change pretty much every part
of ranger, but there is no guarantee that things will continue to work in
future versions as the source code evolves.
.PP
There are some hooks that are specifically made for the use in plugins.  They
are functions that start with hook_ and can be found throughout the code.
.PP
.Vb 1
\& grep \*(Aqdef hook_\*(Aq \-r /path/to/rangers/source
.Ve
.PP
Also try:
.PP
.Vb 1
\& pydoc ranger.api
.Ve
.PP
Note that you should \s-1NOT\s0 simply overwrite a function unless you know what
you're doing.  Instead, save the existing function and call it from your new
one.  This way, multiple plugins can use the same hook.  There are several
sample plugins in the \fIexamples/\fR directory, including a hello-world plugin
that describes this procedure.
.SH "KEY BINDINGS"
.IX Header "KEY BINDINGS"
Key bindings are defined in the file \fIranger/config/rc.conf\fR.  Check this
file for a list of all key bindings.  You can copy it to your local
configuration directory with the \-\-copy\-config=rc option.
.PP
Many key bindings take an additional numeric argument.  Type \fI5j\fR to move
down 5 lines, \fI2l\fR to open a file in mode 2, \fI10<Space>\fR to mark 10 files.
.PP
This list contains the most useful bindings:
.SS "\s-1MAIN\s0 \s-1BINDINGS\s0"
.IX Subsection "MAIN BINDINGS"
.IP "h, j, k, l" 14
.IX Item "h, j, k, l"
Move left, down, up or right
.IP "^D or J, ^U or K" 14
.IX Item "^D or J, ^U or K"
Move a half page down, up
.IP "H, L" 14
.IX Item "H, L"
Move back and forward in the history
.IP "gg" 14
.IX Item "gg"
Move to the top
.IP "G" 14
.IX Item "G"
Move to the bottom
.IP "^R" 14
.IX Item "^R"
Reload everything
.IP "^L" 14
.IX Item "^L"
Redraw the screen
.IP "S" 14
.IX Item "S"
Open a shell in the current directory
.IP "?" 14
Opens this man page
.IP "yy" 14
.IX Item "yy"
Yank the selection to the \*(L"copy\*(R" buffer and mark them as to be copied
.IP "dd" 14
.IX Item "dd"
Cut the selection to the \*(L"copy\*(R" buffer and mark them as to be moved
.IP "pp" 14
.IX Item "pp"
Paste the files from the \*(L"copy\*(R" buffer here (by moving or copying, depending on
how they are marked.) By default, this will not overwrite existing files.  To
overwrite them, use \fIpo\fR.
.IP "m\fIX\fR" 14
.IX Item "mX"
Create a bookmark with the name \fIX\fR
.IP "`\fIX\fR" 14
.IX Item "`X"
Move to the bookmark with the name \fIX\fR
.IP "n, N" 14
.IX Item "n, N"
Find the next file.  By default, this gets you to the newest file in the
directory, but if you search something using the keys /, cm, ct, ..., it will
get you to the next found entry.
.IP "N" 14
.IX Item "N"
Find the previous file.
.IP "o\fIX\fR" 14
.IX Item "oX"
Change the sort method (like in mutt)
.IP "z\fIX\fR" 14
.IX Item "zX"
Change settings.  See the settings section for a list of settings and their
hotkey.
.IP "f" 14
.IX Item "f"
Quickly navigate by entering a part of the filename.
.IP "Space" 14
.IX Item "Space"
Mark a file.
.IP "v" 14
.IX Item "v"
Toggle the mark-status of all files, unmark all files.
.IP "V, uv" 14
.IX Item "V, uv"
Unmark all files
.IP "/" 14
Search for files in the current directory.
.IP ":" 14
Open the console.
.IP "Alt\-\fIN\fR" 14
.IX Item "Alt-N"
Open a tab. N has to be a number from 0 to 9. If the tab doesn't exist yet, it
will be created.
.IP "gn, ^N" 14
.IX Item "gn, ^N"
Create a new tab.
.IP "gt, gT" 14
.IX Item "gt, gT"
Go to the next or previous tab. You can also use \s-1TAB\s0 and \s-1SHIFT+TAB\s0 instead.
.IP "gc, ^W" 14
.IX Item "gc, ^W"
Close the current tab.  The last tab cannot be closed this way.
.SS "\s-1MIDNIGHT\s0 COMMANDER-LIKE \s-1BINDINGS\s0"
.IX Subsection "MIDNIGHT COMMANDER-LIKE BINDINGS"
.IP "<F1>" 14
.IX Item "<F1>"
Display Help.
.IP "<F3>" 14
.IX Item "<F3>"
Display the file.
.IP "<F4>" 14
.IX Item "<F4>"
Edit the file.
.IP "<F5>" 14
.IX Item "<F5>"
Copy the file.
.IP "<F6>" 14
.IX Item "<F6>"
Cut the file.
.IP "<F7>" 14
.IX Item "<F7>"
Open the console with \*(L":mkdir \*(R".
.IP "<F8>" 14
.IX Item "<F8>"
Prompt for deletion of the selected files.
.IP "<F10>" 14
.IX Item "<F10>"
Exit ranger.
.SS "READLINE-LIKE \s-1BINDINGS\s0 \s-1IN\s0 \s-1THE\s0 \s-1CONSOLE\s0"
.IX Subsection "READLINE-LIKE BINDINGS IN THE CONSOLE"
.IP "^B, ^F" 14
.IX Item "^B, ^F"
Move left and right (B for back, F for forward)
.IP "^P, ^N" 14
.IX Item "^P, ^N"
Move up and down (P for previous, N for Next)
.IP "^A, ^E" 14
.IX Item "^A, ^E"
Move to the start or to the end
.IP "^D" 14
.IX Item "^D"
Delete the current character.
.IP "^H" 14
.IX Item "^H"
Backspace.
.SH "MOUSE BUTTONS"
.IX Header "MOUSE BUTTONS"
.IP "Left Mouse Button" 4
.IX Item "Left Mouse Button"
Click on something and you'll move there.  To run a file, \*(L"enter\*(R" it, like a
directory, by clicking on the preview.
.IP "Right Mouse Button" 4
.IX Item "Right Mouse Button"
Enter a directory or run a file.
.IP "Scroll Wheel" 4
.IX Item "Scroll Wheel"
Scrolls up or down.  You can point at the column of the parent directory while
scrolling to switch directories.
.SH "SETTINGS"
.IX Header "SETTINGS"
This section lists all built-in settings of ranger.  The valid types for the
value are in [brackets].  The hotkey to toggle the setting is in <brokets>, if
a hotkey exists.
.PP
Settings can be changed in the file \fI~/.config/ranger/rc.conf\fR or on the
fly with the command \fB:set option value\fR.  Examples:
.PP
.Vb 2
\& set column_ratios 1,2,3
\& set show_hidden true
.Ve
.PP
The different types of settings and an example for each type:
.PP
.Vb 7
\& setting type   | example values
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& bool           | true, false
\& integer        | 1, 23, 1337
\& string         | foo, hello world
\& list           | 1,2,3,4
\& none           | none
.Ve
.PP
You can view a list of all settings and their current values by pressing \*(L"3?\*(R"
in ranger.
.IP "autosave_bookmarks [bool]" 4
.IX Item "autosave_bookmarks [bool]"
Save bookmarks (used with mX and `X) instantly?  This helps to synchronize
bookmarks between multiple ranger instances but leads to *slight* performance
loss.  When false, bookmarks are saved when ranger is exited.
.IP "autoupdate_cumulative_size [bool]" 4
.IX Item "autoupdate_cumulative_size [bool]"
You can display the \*(L"real\*(R" cumulative size of directories by using the command
:get_cumulative_size or typing \*(L"dc\*(R".  The size is expensive to calculate and
will not be updated automatically.  You can choose to update it automatically
though by turning on this option.
.IP "collapse_preview [bool] <zc>" 4
.IX Item "collapse_preview [bool] <zc>"
When no preview is visible, should the last column be squeezed to make use of
the whitespace?
.IP "colorscheme [string]" 4
.IX Item "colorscheme [string]"
Which colorscheme to use?  These colorschemes are available by default:
\&\fBdefault\fR, \fBjungle\fR, \fBsnow\fR.  Snow is a monochrome scheme, jungle replaces
blue directories with green ones for better visibility on certain terminals.
.IP "column_ratios [list]" 4
.IX Item "column_ratios [list]"
How many columns are there, and what are their relative widths?  For example, a
value of 1,1,1 would mean 3 evenly sized columns. 1,1,1,1,4 means 5 columns
with the preview column being as large as the other columns combined.
.IP "confirm_on_delete [string]" 4
.IX Item "confirm_on_delete [string]"
Ask for a confirmation when running the \*(L"delete\*(R" command?  Valid values are
\&\*(L"always\*(R" (default), \*(L"never\*(R", \*(L"multiple\*(R". With \*(L"multiple\*(R", ranger will ask only
if you delete multiple files at once.
.IP "dirname_in_tabs [bool]" 4
.IX Item "dirname_in_tabs [bool]"
Display the directory name in tabs?
.IP "display_size_in_main_column [bool]" 4
.IX Item "display_size_in_main_column [bool]"
Display the file size in the main column?
.IP "display_size_in_status_bar [bool]" 4
.IX Item "display_size_in_status_bar [bool]"
Display the file size in the status bar?
.IP "display_tags_in_all_columns [bool]" 4
.IX Item "display_tags_in_all_columns [bool]"
Display tags in all columns?
.IP "draw_borders [bool]" 4
.IX Item "draw_borders [bool]"
Draw borders around columns?
.IP "draw_progress_bar_in_statusbar [bool]" 4
.IX Item "draw_progress_bar_in_statusbar [bool]"
Draw a progress bar in the status bar which displays the average state of all
currently running tasks which support progress bars?
.IP "flushinput [bool] <zi>" 4
.IX Item "flushinput [bool] <zi>"
Flush the input after each key hit?  One advantage is that when scrolling down
with \*(L"j\*(R", ranger stops scrolling instantly when you release the key.  One
disadvantage is that when you type commands blindly, some keys might get lost.
.IP "hidden_filter [string]" 4
.IX Item "hidden_filter [string]"
A regular expression pattern for files which should be hidden.  For example,
this pattern will hide all files that start with a dot or end with a tilde.
.Sp
.Vb 1
\& set hidden_filter ^\e.|~$
.Ve
.IP "max_console_history_size [integer, none]" 4
.IX Item "max_console_history_size [integer, none]"
How many console commands should be kept in history?  \*(L"none\*(R" will disable the
limit.
.IP "max_history_size [integer, none]" 4
.IX Item "max_history_size [integer, none]"
How many directory changes should be kept in history?
.IP "mouse_enabled [bool] <zm>" 4
.IX Item "mouse_enabled [bool] <zm>"
Enable mouse input?
.IP "padding_right [bool]" 4
.IX Item "padding_right [bool]"
When collapse_preview is on and there is no preview, should there remain a
little padding on the right?  This allows you to click into that space to run
the file.
.IP "preview_directories [bool] <zP>" 4
.IX Item "preview_directories [bool] <zP>"
Preview directories in the preview column?
.IP "preview_files [bool] <zp>" 4
.IX Item "preview_files [bool] <zp>"
Preview files in the preview column?
.IP "preview_script [string, none]" 4
.IX Item "preview_script [string, none]"
Which script should handle generating previews?  If the file doesn't exist, or
use_preview_script is off, ranger will handle previews itself by just printing
the content.
.IP "save_console_history [bool]" 4
.IX Item "save_console_history [bool]"
Should the console history be saved on exit?  If disabled, the console history
is reset when you restart ranger.
.IP "scroll_offset [integer]" 4
.IX Item "scroll_offset [integer]"
Try to keep this much space between the top/bottom border when scrolling.
.IP "shorten_title [integer, bool]" 4
.IX Item "shorten_title [integer, bool]"
Trim the title of the window if it gets long?  The number defines how many
directories are displayed at once, False turns off this feature.
.IP "show_cursor [bool]" 4
.IX Item "show_cursor [bool]"
Always show the terminal cursor?
.IP "show_hidden_bookmarks [bool]" 4
.IX Item "show_hidden_bookmarks [bool]"
Show dotfiles in the bookmark preview window? (Type ')
.IP "show_hidden [bool] <zh>, <^H>" 4
.IX Item "show_hidden [bool] <zh>, <^H>"
Show hidden files?
.IP "sort_case_insensitive [bool] <zc>" 4
.IX Item "sort_case_insensitive [bool] <zc>"
Sort case-insensitively?  If true, \*(L"a\*(R" will be listed before \*(L"B\*(R" even though
its \s-1ASCII\s0 value is higher.
.IP "sort_directories_first [bool] <zd>" 4
.IX Item "sort_directories_first [bool] <zd>"
Sort directories first?
.IP "sort_reverse [bool] <or>" 4
.IX Item "sort_reverse [bool] <or>"
Reverse the order of files?
.IP "sort [string] <oa>, <ob>, <oc>, <om>, <on>, <ot>, <os>" 4
.IX Item "sort [string] <oa>, <ob>, <oc>, <om>, <on>, <ot>, <os>"
Which sorting mechanism should be used?  Choose one of \fBatime\fR, \fBbasename\fR,
\&\fBctime\fR, \fBmtime\fR, \fBnatural\fR, \fBtype\fR, \fBsize\fR
.Sp
Note: You can reverse the order by using an uppercase O in the key combination.
.IP "tilde_in_titlebar [bool]" 4
.IX Item "tilde_in_titlebar [bool]"
Abbreviate \f(CW$HOME\fR with ~ in the title bar (first line) of ranger?
.IP "unicode_ellipsis [bool]" 4
.IX Item "unicode_ellipsis [bool]"
Use a unicode \*(L"...\*(R" character instead of \*(L"~\*(R" to mark cut-off filenames?
.IP "update_title [bool]" 4
.IX Item "update_title [bool]"
Set a window title?
.IP "update_tmux_title [bool]" 4
.IX Item "update_tmux_title [bool]"
Set the title to \*(L"ranger\*(R" in the tmux program?
.IP "use_preview_script [bool] <zv>" 4
.IX Item "use_preview_script [bool] <zv>"
Use the preview script defined in the setting \fIpreview_script\fR?
.IP "vcs_aware [bool]" 4
.IX Item "vcs_aware [bool]"
Gather and display data about version control systems. Supported vcs: git, hg.
.IP "vcs_backends [list]" 4
.IX Item "vcs_backends [list]"
List of vcs backends to use. By default it is ['git', 'hg'], but can be set to
handle only 'git' repositories, for example.
.IP "xterm_alt_key [bool]" 4
.IX Item "xterm_alt_key [bool]"
Enable this if key combinations with the Alt Key don't work for you.
(Especially on xterm)
.SH "COMMANDS"
.IX Header "COMMANDS"
You can enter the commands in the console which is opened by pressing \*(L":\*(R".
.PP
You can always get a list of the currently existing commands by typing \*(L"2?\*(R" in
ranger.  For your convenience, this is a list of the \*(L"public\*(R" commands including their parameters, excluding descriptions:
.PP
.Vb 10
\& alias [newcommand] [oldcommand]
\& bulkrename
\& cd [directory]
\& chain command1[; command2[; command3...]]
\& chmod octal_number
\& cmap key command
\& console [\-pSTARTPOSITION] command
\& copycmap key newkey [newkey2...]
\& copymap key newkey [newkey2...]
\& copypmap key newkey [newkey2...]
\& copytmap key newkey [newkey2...]
\& cunmap keys...
\& delete [confirmation]
\& edit [filename]
\& eval [\-q] python_code
\& filter [string]
\& find pattern
\& grep pattern
\& load_copy_buffer
\& map key command
\& mark pattern
\& mark_tag [tags]
\& mkdir dirname
\& open_with [application] [flags] [mode]
\& pmap key command
\& punmap keys...
\& quit
\& quit!
\& relink newpath
\& rename newname
\& save_copy_buffer
\& search pattern
\& search_inc pattern
\& set option value
\& setlocal [path=<path>] option value
\& shell [\-FLAGS] command
\& terminal
\& tmap key command
\& touch filename
\& tunmap keys...
\& unmap keys...
\& unmark pattern
\& unmark_tag [tags]
.Ve
.PP
There are additional commands which are directly translated to python
functions, one for every method in the ranger.core.actions.Actions class.
They are not documented here, since they are mostly for key bindings, not to be
typed in by a user.  Read the source if you are interested in them.
.PP
These are the public commands including their descriptions:
.IP "alias [\fInewcommand\fR] [\fIoldcommand\fR]" 2
.IX Item "alias [newcommand] [oldcommand]"
Copies the oldcommand as newcommand.
.IP "bulkrename" 2
.IX Item "bulkrename"
This command opens a list of selected files in an external editor.  After you
edit and save the file, it will generate a shell script which does bulk
renaming according to the changes you did in the file.
.Sp
This shell script is opened in an editor for you to review.  After you close
it, it will be executed.
.IP "cd [\fIdirectory\fR]" 2
.IX Item "cd [directory]"
The cd command changes the directory.  The command \f(CW\*(C`:cd \-\*(C'\fR is equivalent to
typing ``.
.IP "chain \fIcommand1\fR[; \fIcommand2\fR[; \fIcommand3\fR...]]" 2
.IX Item "chain command1[; command2[; command3...]]"
Combines multiple commands into one, separated by semicolons.
.IP "chmod \fIoctal_number\fR" 2
.IX Item "chmod octal_number"
Sets the permissions of the selection to the octal number.
.Sp
The octal number is between 000 and 777. The digits specify the permissions for
the user, the group and others.  A 1 permits execution, a 2 permits writing, a
4 permits reading.  Add those numbers to combine them. So a 7 permits
everything.
.Sp
Key bindings in the form of [\-+]<who><what> and =<octal> also exist.  For
example, \fB+ar\fR allows reading for everyone, \-ow forbids others to write and
=777 allows everything.
.Sp
See also: man 1 chmod
.IP "cmap \fIkey\fR \fIcommand\fR" 2
.IX Item "cmap key command"
Binds keys for the console. Works like the \f(CW\*(C`map\*(C'\fR command.
.IP "console [\-p\fIN\fR] \fIcommand\fR" 2
.IX Item "console [-pN] command"
Opens the console with the command already typed in.  The cursor is placed at
\&\fIN\fR.
.IP "copycmap \fIkey\fR \fInewkey\fR [\fInewkey2\fR ...]" 2
.IX Item "copycmap key newkey [newkey2 ...]"
See \f(CW\*(C`copymap\*(C'\fR
.IP "copymap \fIkey\fR \fInewkey\fR [\fInewkey2\fR ...]" 2
.IX Item "copymap key newkey [newkey2 ...]"
Copies the keybinding \fIkey\fR to \fInewkey\fR in the \*(L"browser\*(R" context.  This is a
deep copy, so if you change the new binding (or parts of it) later, the old one
is not modified.
.Sp
To copy key bindings of the console, taskview, or pager use \*(L"copycmap\*(R",
\&\*(L"copytmap\*(R" or \*(L"copypmap\*(R".
.IP "copypmap \fIkey\fR \fInewkey\fR [\fInewkey2\fR ...]" 2
.IX Item "copypmap key newkey [newkey2 ...]"
See \f(CW\*(C`copymap\*(C'\fR
.IP "copytmap \fIkey\fR \fInewkey\fR [\fInewkey2\fR ...]" 2
.IX Item "copytmap key newkey [newkey2 ...]"
See \f(CW\*(C`copymap\*(C'\fR
.IP "cunmap [\fIkeys...\fR]" 2
.IX Item "cunmap [keys...]"
Removes key mappings of the console. Works like the \f(CW\*(C`unmap\*(C'\fR command.
.IP "delete [\fIconfirmation\fR]" 2
.IX Item "delete [confirmation]"
Destroy all files in the selection with a roundhouse kick.  ranger will ask for
a confirmation if you attempt to delete multiple (marked) files or non-empty
directories.
.Sp
When asking for confirmation, this command will only proceed if the last given
word starts with a `y'.
.IP "edit [\fIfilename\fR]" 2
.IX Item "edit [filename]"
Edit the current file or the file in the argument.
.IP "eval [\fI\-q\fR] \fIpython_code\fR" 2
.IX Item "eval [-q] python_code"
Evaluates the python code.  `fm' is a reference to the \s-1FM\s0 instance.  To display
text, use the function `p'.  The result is displayed on the screen unless you
use the \*(L"\-q\*(R" option.
.Sp
Examples:
 :eval fm
 :eval len(fm.env.directories)
 :eval p(\*(L"Hello World!\*(R")
.IP "filter [\fIstring\fR]" 2
.IX Item "filter [string]"
Displays only the files which contain the \fIstring\fR in their basename.  Running
this command without any parameter will reset the fitler.
.IP "find \fIpattern\fR" 2
.IX Item "find pattern"
Search files in the current directory that match the given (case-insensitive)
regular expression pattern as you type.  Once there is an unambiguous result,
it will be run immediately. (Or entered, if it's a directory.)
.IP "grep \fIpattern\fR" 2
.IX Item "grep pattern"
Looks for a string in all marked files or directories.
.IP "load_copy_buffer" 2
.IX Item "load_copy_buffer"
Load the copy buffer from \fI~/.config/ranger/copy_buffer\fR.  This can be used to
pass the list of copied files to another ranger instance.
.IP "map \fIkey\fR \fIcommand\fR" 2
.IX Item "map key command"
Assign the key combination to the given command.  Whenever you type the
key/keys, the command will be executed.  Additionally, if you use a quantifier
when typing the key, like 5j, it will be passed to the command as the attribute
\&\*(L"self.quantifier\*(R".
.Sp
The keys you bind with this command are accessible in the file browser only,
not in the console, task view or pager.  To bind keys there, use the commands
\&\*(L"cmap\*(R", \*(L"tmap\*(R" or \*(L"pmap\*(R".
.IP "mark \fIpattern\fR" 2
.IX Item "mark pattern"
Mark all files matching the regular expression pattern.
.IP "mark_tag [\fItags\fR]" 2
.IX Item "mark_tag [tags]"
Mark all tags that are tagged with either of the given tags.  When leaving out
the tag argument, all tagged files are marked.
.IP "mkdir \fIdirname\fR" 2
.IX Item "mkdir dirname"
Creates a directory with the name \fIdirname\fR.
.IP "open_with [\fIapplication\fR] [\fIflags\fR] [\fImode\fR]" 2
.IX Item "open_with [application] [flags] [mode]"
Open the selected files with the given application, unless it is omitted, in
which case the default application is used.  \fIflags\fR are characters out of
\&\*(L"sdpcwSDPCW\*(R" and \fImode\fR is any positive integer. Their meanings are discussed
in their own sections.
.IP "pmap \fIkey\fR \fIcommand\fR" 2
.IX Item "pmap key command"
Binds keys for the pager. Works like the \f(CW\*(C`map\*(C'\fR command.
.IP "punmap [\fIkeys ...\fR]" 2
.IX Item "punmap [keys ...]"
Removes key mappings of the pager. Works like the \f(CW\*(C`unmap\*(C'\fR command.
.IP "quit" 2
.IX Item "quit"
Like quit!, but closes only this tab if multiple tabs are open.
.IP "quit!" 2
.IX Item "quit!"
Quit ranger.  The current directory will be bookmarked as ' so you can re-enter
it by typing `` or '' the next time you start ranger.
.IP "relink \fInewpath\fR" 2
.IX Item "relink newpath"
Change the link destination of the current symlink file to <newpath>. First
<tab> will load the original link.
.IP "rename \fInewname\fR" 2
.IX Item "rename newname"
Rename the current file.  If a file with that name already exists, the renaming
will fail.  Also try the key binding A for appending something to a file name.
.IP "save_copy_buffer" 2
.IX Item "save_copy_buffer"
Save the copy buffer from \fI~/.config/ranger/copy_buffer\fR.  This can be used to
pass the list of copied files to another ranger instance.
.IP "search \fIpattern\fR" 2
.IX Item "search pattern"
Search files in the current directory that match the given (case insensitive)
regular expression pattern.
.IP "search_inc \fIpattern\fR" 2
.IX Item "search_inc pattern"
Search files in the current directory that match the given (case insensitive)
regular expression pattern.  This command gets you to matching files as you
type.
.IP "set \fIoption\fR \fIvalue\fR" 2
.IX Item "set option value"
Assigns a new value to an option.  Valid options are listed in the settings
section.  Use tab completion to get the current value of an option, though this
doesn't work for functions and regular expressions. Valid values are:
.Sp
.Vb 7
\& setting type   | example values
\& \-\-\-\-\-\-\-\-\-\-\-\-\-\-\-+\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-\-
\& bool           | true, false
\& integer        | 1, 23, 1337
\& string         | foo, hello world
\& list           | 1,2,3,4
\& none           | none
.Ve
.IP "setlocal [path=\fIpath\fR] \fIoption\fR \fIvalue\fR" 2
.IX Item "setlocal [path=path] option value"
Assigns a new value to an option, but locally for the directory given by
\&\fIpath\fR. This means, that this option only takes effect when visiting that
directory. If no path is given, uses the current directory.
.IP "shell [\-\fIflags\fR] \fIcommand\fR" 2
.IX Item "shell [-flags] command"
Run a shell command.  \fIflags\fR are discussed in their own section.
.IP "terminal" 2
.IX Item "terminal"
Spawns the \fIx\-terminal-emulator\fR starting in the current directory.
.IP "tmap \fIkey\fR \fIcommand\fR" 2
.IX Item "tmap key command"
Binds keys for the taskview. Works like the \f(CW\*(C`map\*(C'\fR command.
.IP "touch \fIfilename\fR" 2
.IX Item "touch filename"
Creates an empty file with the name \fIfilename\fR, unless it already exists.
.IP "tunmap [\fIkeys ...\fR]" 2
.IX Item "tunmap [keys ...]"
Removes key mappings of the taskview. Works like the \f(CW\*(C`unmap\*(C'\fR command.
.IP "unmap [\fIkeys\fR ...]" 2
.IX Item "unmap [keys ...]"
Removes the given key mappings in the \*(L"browser\*(R" context.  To unmap key bindings
in the console, taskview, or pager use \*(L"cunmap\*(R", \*(L"tunmap\*(R" or \*(L"punmap\*(R".
.IP "unmark \fIpattern\fR" 2
.IX Item "unmark pattern"
Unmark all files matching a regular expression pattern.
.IP "unmark_tag [\fItags\fR]" 2
.IX Item "unmark_tag [tags]"
Unmark all tags that are tagged with either of the given tags.  When leaving
out the tag argument, all tagged files are unmarked.
.SH "FILES"
.IX Header "FILES"
ranger reads several configuration files which are located in
\&\fI\f(CI$HOME\fI/.config/ranger\fR or \fI\f(CI$XDG_CONFIG_HOME\fI/ranger\fR if \f(CW$XDG_CONFIG_HOME\fR is
defined.  You can use the \-\-copy\-config option to obtain the default
configuration files.  Each of the files contains further documentation.
.PP
You don't need to copy the whole file though, most configuration files are
overlaid on top of the defaults (\fIcommands.py\fR, \fIrc.conf\fR) or can be
sub-classed (\fIcolorschemes\fR).
.PP
When starting ranger with the \fB\-\-clean\fR option, it will not access or create
any of these files.
.SS "\s-1CONFIGURATION\s0"
.IX Subsection "CONFIGURATION"
.IP "rc.conf" 10
.IX Item "rc.conf"
Contains a list of commands which are executed on startup.  Mostly key bindings
and settings are defined here.
.IP "commands.py" 10
.IX Item "commands.py"
A python module that defines commands which can be used in ranger's console by
typing \*(L":\*(R" or in the rc.conf file.
.IP "rifle.conf" 10
.IX Item "rifle.conf"
This is the configuration file for the built-in file launcher called \*(L"rifle\*(R".
.IP "scope.sh" 10
.IX Item "scope.sh"
This is a script that handles file previews.  When the options
\&\fIuse_preview_script\fR and \fIpreview_files\fR are set, the program specified in
the option \fIpreview_script\fR is run and its output and/or exit code determines
rangers reaction.
.IP "colorschemes/" 10
.IX Item "colorschemes/"
Colorschemes can be placed here.
.IP "plugins/" 10
.IX Item "plugins/"
Plugins can be placed here.
.SS "\s-1STORAGE\s0"
.IX Subsection "STORAGE"
.IP "bookmarks" 10
.IX Item "bookmarks"
This file contains a list of bookmarks.  The syntax is /^(.):(.*)$/. The first
character is the bookmark key and the rest after the colon is the path to the
file.  In ranger, bookmarks can be set by typing m<key>, accessed by typing
\&'<key> and deleted by typing um<key>.
.IP "copy_buffer" 10
.IX Item "copy_buffer"
When running the command :save_copy_buffer, the paths of all currently copied
files are saved in this file.  You can later run :load_copy_buffer to copy the
same files again, pass them to another ranger instance or process them in a
script.
.IP "history" 10
.IX Item "history"
Contains a list of commands that have been previously typed in.
.IP "tagged" 10
.IX Item "tagged"
Contains a list of tagged files. The syntax is /^(.:)?(.*)$/ where the first
letter is the optional name of the tag and the rest after the optional colon is
the path to the file.  In ranger, tags can be set by pressing t and removed
with T.  To assign a named tag, type "<tagname>.
.SH "ENVIRONMENT"
.IX Header "ENVIRONMENT"
These environment variables have an effect on ranger:
.IP "\s-1RANGER_LEVEL\s0" 8
.IX Item "RANGER_LEVEL"
ranger sets this environment variable to \*(L"1\*(R" or increments it if it already
exists.  External programs can determine whether they were spawned from ranger
by checking for this variable.
.IP "\s-1EDITOR\s0" 8
.IX Item "EDITOR"
Defines the editor to be used for the \*(L"E\*(R" key.  Defaults to the first installed
program out of \*(L"vim\*(R", \*(L"emacs\*(R" and \*(L"nano\*(R".
.IP "\s-1SHELL\s0" 8
.IX Item "SHELL"
Defines the shell that ranger is going to use with the :shell command and
the \*(L"S\*(R" key.  Defaults to \*(L"bash\*(R".
.IP "\s-1TERMCMD\s0" 8
.IX Item "TERMCMD"
Defines the terminal emulator command that ranger is going to use with the
:terminal command and the \*(L"t\*(R" run flag.  Defaults to \*(L"x\-terminal-emulator\*(R" or
\&\*(L"xterm\*(R"
.IP "\s-1XDG_CONFIG_HOME\s0" 8
.IX Item "XDG_CONFIG_HOME"
Specifies the directory for configuration files. Defaults to \fI\f(CI$HOME\fI/.config\fR.
.IP "\s-1PYTHONOPTIMIZE\s0" 8
.IX Item "PYTHONOPTIMIZE"
This variable determines the optimize level of python.
.Sp
Using PYTHONOPTIMIZE=1 (like python \-O) will make python discard assertion
statements.  You will gain efficiency at the cost of losing some debug info.
.Sp
Using PYTHONOPTIMIZE=2 (like python \-OO) will additionally discard any
docstrings.  Using this will disable the <F1> key on commands.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
There are various examples on how to extend ranger with plugins or combine
ranger with other programs.  These can be found in the \fIexamples/\fR directory
that is provided along with the source code.
.SH "LICENSE"
.IX Header "LICENSE"
\&\s-1GNU\s0 General Public License 3 or (at your option) any later version.
.SH "LINKS"
.IX Header "LINKS"
.IP "Download: http://ranger.nongnu.org/ranger\-stable.tar.gz <http://ranger.nongnu.org/ranger-stable.tar.gz>" 4
.IX Item "Download: http://ranger.nongnu.org/ranger-stable.tar.gz <http://ranger.nongnu.org/ranger-stable.tar.gz>"
.PD 0
.IP "The project page: <http://ranger.nongnu.org/>" 4
.IX Item "The project page: <http://ranger.nongnu.org/>"
.IP "The mailing list: <http://savannah.nongnu.org/mail/?group=ranger>" 4
.IX Item "The mailing list: <http://savannah.nongnu.org/mail/?group=ranger>"
.PD
.PP
ranger is maintained with the git version control system.  To fetch a fresh
copy, run:
.PP
.Vb 1
\& git clone git://git.savannah.nongnu.org/ranger.git
.Ve
.SH "BUGS"
.IX Header "BUGS"
Report bugs here: <http://savannah.nongnu.org/bugs/?group=ranger>
.PP
Please include as much relevant information as possible.  For the most
diagnostic output, run ranger like this: \f(CW\*(C`PYTHONOPTIMIZE= ranger \-\-debug\*(C'\fR
